parameters:
  - name: ADF_ResourceId
    type: string
    default: false
  - name: buildfilespath
    type: string
    default: build
  - name: overrideParameters
    type: string
    default: false
  - name: variablegroupfortest
    type: string
    default: false
    
jobs:
  - job: 'Build_and_Validate_ADF'
    steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            $json = '{
                "scripts":{
                    "build":"node node_modules/@microsoft/azure-data-factory-utilities/lib/index"
                },
                "dependencies":{
                    "@microsoft/azure-data-factory-utilities":"^1.0.0"
                }
            }'
            $json | Out-File $(Build.Repository.LocalPath)/${{parameters.buildfilespath}}/package.json
        displayName: 'Create package.json'
      - task: UseNode@1
        inputs:
          version: '18.x'
        displayName: 'Install Node.js'

      - task: Npm@1
        inputs:
          command: 'install'
          workingDir: '$(Build.Repository.LocalPath)/${{parameters.buildfilespath}}' #replace with the package.json folder
          verbose: true
        displayName: 'Install npm package'

      # Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
      # Enter the appropriate subscription and name for the source factory. Either of the "Validate" or "Validate and Generate ARM temmplate" options are required to perform validation. Running both is unnecessary.

      - task: Npm@1
        inputs:
          command: 'custom'
          workingDir: '$(Build.Repository.LocalPath)/${{parameters.buildfilespath}}' #replace with the package.json folder
          customCommand: 'run build validate $(Build.Repository.LocalPath) ${{parameters.ADF_ResourceId}}'
        displayName: 'Validate'

      - task: Npm@1
        inputs:
          command: 'custom'
          workingDir: '$(Build.Repository.LocalPath)/build' #replace with the package.json folder
          customCommand: 'run build export $(Build.Repository.LocalPath) ${{parameters.ADF_ResourceId}} "ArmTemplate"'
      #For using preview that allows you to only stop/ start triggers that are modified, please comment out the above line and uncomment the below line. Make sure the package.json contains the build-preview command. 
      #customCommand: 'run build-preview export $(Build.Repository.LocalPath) /subscriptions/222f1459-6ebd-4896-82ab-652d5f6883cf/resourceGroups/GartnerMQ2021/providers/Microsoft.DataFactory/factories/Dev-GartnerMQ2021-DataFactory "ArmTemplate"'
        displayName: 'Validate and Generate ARM template'

        # Publish the artifact to be used as a source for a release pipeline.

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.Repository.LocalPath)/build/ArmTemplate' #replace with the package.json folder
          artifact: 'ArmTemplates'
          publishLocation: 'pipeline'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.Repository.LocalPath)/build/ArmTemplate'
          ArtifactName: 'drop'
          publishLocation: 'Container'
  - deployment: 
    dependsOn: 'Build_and_Validate_ADF'
    environment: 'ADF_TEST'
    variables: 
      - group: '${{parameters.variablegroupfortest}}'
    strategy:
      runOnce:
        deploy:
          steps:
            - task: DownloadBuildArtifacts@1
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'drop'
                downloadPath: '$(System.ArtifactsDirectory)'
            - task: AzurePowerShell@5
              displayName: 'Pre-Deployment'
              inputs:
                azureSubscription: 'MySubscription(63bd2eef-d99c-4b36-a3b0-b89c12000aa7)'
                ScriptType: 'FilePath'
                ScriptPath: '$(System.ArtifactsDirectory)/drop/ARMTemplateForFactory.json'
                ScriptArguments: '-armTemplate $(System.ArtifactsDirectory)/drop/ARMTemplateForFactory.json -ResourceGroupName ADF -DataFactoryName $(datafactoryname) -predeployment $true -deleteDeployment $false'
                azurePowerShellVersion: 'LatestVersion'
            - task: AzureResourceManagerTemplateDeployment@3
              inputs:
                deploymentScope: 'Resource Group'
                azureResourceManagerConnection: 'MySubscription(63bd2eef-d99c-4b36-a3b0-b89c12000aa7)'
                subscriptionId: '63bd2eef-d99c-4b36-a3b0-b89c12000aa7'
                action: 'Create Or Update Resource Group'
                resourceGroupName: 'ADF'
                location: 'East US'
                templateLocation: 'Linked artifact'
                csmFile: '$(System.ArtifactsDirectory)/drop/ARMTemplateForFactory.json'
                csmParametersFile: '$(System.ArtifactsDirectory)/drop/ARMTemplateParametersForFactory.json'
                # overrideParameters: '
                #             -factoryName $(datafactoryname) 
                #             -Copy_TF_Files_copy1_properties_parameters_Sink_defaultValue $(Copy_TF_Files_copy1_properties_parameters_Sink_defaultValue)'
                overrideParameters: '${{parameters.overrideParameters}}'
                deploymentMode: 'Incremental'
            - task: AzurePowerShell@5
              displayName: 'Post-Deployment'
              inputs:
                azureSubscription: 'MySubscription(63bd2eef-d99c-4b36-a3b0-b89c12000aa7)'
                ScriptType: 'FilePath'
                ScriptPath: '$(System.ArtifactsDirectory)/drop/ARMTemplateForFactory.json'
                ScriptArguments: '-armTemplate "$(System.ArtifactsDirectory)/drop/ARMTemplateForFactory.json" -ResourceGroupName ADF -DataFactoryName $(datafactoryname) -predeployment $true -deleteDeployment $false'
                azurePowerShellVersion: 'LatestVersion'